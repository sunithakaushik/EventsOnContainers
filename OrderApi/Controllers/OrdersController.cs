using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Common.Messaging;
//using Common.Messaging;
using MassTransit;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using OrderApi.Data;
using OrderApi.Models;

// Module 25
namespace OrderApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class OrdersController : ControllerBase
    {
        private readonly OrdersContext _ordersContext;
        private readonly IConfiguration _config;
        private readonly ILogger<OrdersController> _logger;
        private IPublishEndpoint _bus;
        public OrdersController(OrdersContext ordersContext,
            ILogger<OrdersController> logger,
            IConfiguration config,
            IPublishEndpoint bus)
        {
            _config = config;
            _ordersContext = ordersContext ?? throw new ArgumentNullException(nameof(ordersContext));
            ordersContext.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;

            _bus = bus;
            _logger = logger;
        }

        //POST api/Order/new
        [Route("new")]
        [HttpPost]
        [ProducesResponseType((int)HttpStatusCode.Accepted)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<IActionResult> CreateOrder([FromBody] Order order)
        {
            // Create Order - only this is implemented
            order.OrderStatus = OrderStatus.Preparing;
            order.OrderDate = DateTime.UtcNow;

            _logger.LogInformation(" testing ");

            _logger.LogInformation(" In Create Order");
            _logger.LogInformation(" Order" + order.UserName);
            _ordersContext.Orders.Add(order);  // write to sql db, orders table and add to it -insert record
            _ordersContext.OrderItems.AddRange(order.OrderItems); // each product in the order with total adds a range of items into the db

            _logger.LogInformation(" Order added to context");
            _logger.LogInformation(" Saving........");
            // most important to save the order in db, and if it fails need to know, hence put in try-catch block
            // committing to the database - save is the operation
            try
            {
                await _ordersContext.SaveChangesAsync();
                _logger.LogWarning("BuyerId is: " + order.BuyerId);
                // Module 26, after the order has created, we are creating a new order completed event and wait 
                // for publish to finish then moved to say order is completed
                _bus.Publish(new OrderCompletedEvent(order.BuyerId)).Wait();
                // db will give the order id, generated by db
                return Ok(new { order.OrderId });
            }
            catch (DbUpdateException ex)
            {
                _logger.LogError("An error occored during Order saving .." + ex.Message);
                return BadRequest();
            }
        }

        [HttpGet("{id}", Name = "GetOrder")]
        //[Route("{id}")]
        [ProducesResponseType((int)HttpStatusCode.Accepted)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<IActionResult> GetOrder(int id)
        {
            // give an order by the id using the linq query to get all items for this order
            // here the primary key is the order id between order and order item table
            // linq query includes all the order items for this order id
            var item = await _ordersContext.Orders
                .Include(x => x.OrderItems)
                .SingleOrDefaultAsync(ci => ci.OrderId == id);
            if (item != null)
            {
                return Ok(item);
            }

            return NotFound();

        }

        [Route("")]
        [HttpGet]
        [ProducesResponseType((int)HttpStatusCode.Accepted)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<IActionResult> GetOrders()
        {
            // Get all the orders - can be used to limit by the user - NOT Used
            var orders = await _ordersContext.Orders.ToListAsync();
            return Ok(orders);
        }
    }
}